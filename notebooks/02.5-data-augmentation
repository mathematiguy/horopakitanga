{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "07e545d3-bf1b-46cb-afa4-df3d42d6cd17",
   "metadata": {},
   "source": [
    "# Inspecting the training data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ed32209c-fd7b-46b3-a506-321c6c88647e",
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "import random\n",
    "import logging\n",
    "import hashlib\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from ataarangi.rakau import WorldState\n",
    "from ataarangi.data import encode_world_state"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "dac8bb7f-5f18-43e4-949f-7c3f6bf8ea4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "json_data = []\n",
    "world_states = []\n",
    "with open('../data/world_states.jsonl', 'r') as f:\n",
    "    for line in f.readlines():\n",
    "        j = json.loads(line)\n",
    "        json_data.append(j)\n",
    "        world_states.append(\n",
    "            WorldState.from_dict(j['sticks'])\n",
    "        )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4c6b2926-efe6-4003-81bb-b3b96d98515d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# for j in json_data:\n",
    "#     sticks = j['sticks']['ng훮_r훮kau']\n",
    "#     sticks = sorted(sticks, key=lambda x: x['location'])\n",
    "#     for i, stick in enumerate(sticks):\n",
    "#         stick['location'] = i+1\n",
    "    \n",
    "#     j['sticks']['ng훮_r훮kau'] = sticks\n",
    "\n",
    "# with open('../data/world_states.jsonl', 'w') as f:\n",
    "#     for j in json_data:\n",
    "#         f.write(json.dumps(j) + '\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "f9cff455-85d5-4dd3-b631-21923afd8cc5",
   "metadata": {},
   "outputs": [],
   "source": [
    "state = WorldState.from_dict(json_data[0]['sticks'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bdd16dfe-d965-4fb9-b2fb-2996f56a81c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "state.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1843a5cf-d4d6-4544-be6e-41d7eba98e57",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "plt.hist([len(j['sticks']['ng훮_r훮kau']) for j in json_data], bins=12)\n",
    "ax.set_title(\"Histogram of number of sticks per sample\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c210519d-265a-4da2-8bb7-b711add1a355",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "plt.hist([j['entropy'] for j in json_data], bins=16)\n",
    "ax.set_title(\"Histogram entropy per sample\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2789bfa9-65e7-4f4b-b310-1fc5bfe9c489",
   "metadata": {},
   "source": [
    "Based on this plot, it's probably enough to filter out samples with more than 10 sticks as being 'too complicated'. That'll help us keep the feature matrices compact, which hopefully will help with learning."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68639e17-b932-4e62-815e-6583a9631367",
   "metadata": {},
   "source": [
    "## Generating world state features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9a656b44-8610-4ac4-ad80-0d087b9dbae3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from ataarangi.data import WorldStateTokenizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9e2779d2-34a8-45a9-a973-6ff51963e539",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example usage\n",
    "sticks_data = [\n",
    "    {'color': 'blue', 'height': 4, 'location': 3, 'selected': True},\n",
    "    {'color': 'white', 'height': 8, 'location': 5, 'selected': False}\n",
    "]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3174562c-5524-4fd1-a8ad-e57b3b6337e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 5, 15, 3, 9, 19, 22]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ws_tokenizer = WorldStateTokenizer('../data/worldstate_tokens.txt')\n",
    "ws_tokenizer.tokenize(sticks_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "242110b1-906e-4b32-857e-07de04de32b6",
   "metadata": {},
   "source": [
    "## Looking at the text descriptions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "b102a228-f6cf-4852-8171-e1b68ddc06c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'Most common sequence descriptions'}>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "(pd.Series(\n",
    "    [j['description'] for j in json_data]\n",
    "    ).value_counts()\n",
    "     .head(10)\n",
    "     .sort_values()\n",
    "     .plot(kind='barh', title='Most common sequence descriptions')\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "df9d5b57-a6d7-429a-953b-04fbde934fd4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "35.6% of descriptions are 'ng훮 r훮kau'\n"
     ]
    }
   ],
   "source": [
    "print(f\"{len([j for j in json_data if j['description'] == 'ng훮 r훮kau']) / len(json_data)*100:.1f}% of descriptions are 'ng훮 r훮kau'\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3db1721f-909f-48f2-816f-2befdf4ce84a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30 words in the vocab\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "r훮kau        1481\n",
       "te           1031\n",
       "ng훮           510\n",
       "me            401\n",
       "m훮            137\n",
       "k훮k훮riki      134\n",
       "k흲whai        134\n",
       "kikorangi     133\n",
       "parauri       132\n",
       "pango         127\n",
       "whero         117\n",
       "m훮whero       116\n",
       "iti            89\n",
       "nui            83\n",
       "h훮unga         64\n",
       "katoa          62\n",
       "rawa           41\n",
       "taha           37\n",
       "kei            37\n",
       "mau카           33\n",
       "matau          26\n",
       "ki             24\n",
       "tawhiti        22\n",
       "e              16\n",
       "rua            15\n",
       "waenganui       5\n",
       "i               3\n",
       "toru            1\n",
       "tuarua          1\n",
       "mai             1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "descriptions = pd.Series([j['description'] for j in json_data])\n",
    "word_counts = pd.Series(' '.join(descriptions).split(' ')).value_counts()\n",
    "print(f\"{len(word_counts)} words in the vocab\")\n",
    "word_counts"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28a083c1-0d3e-4fe2-9d64-fec88266c71e",
   "metadata": {},
   "source": [
    "## Assembling a dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b4b4b740-db0f-4925-8159-525aa7b09311",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>entropy</th>\n",
       "      <th>r훮kau</th>\n",
       "      <th>description</th>\n",
       "      <th>num_r훮kau</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>800d23b5-574c-46d3-94cf-1066082e9d7d</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[{'color': 'blue', 'height': 4, 'location': 1,...</td>\n",
       "      <td>te r훮kau m훮</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>659289fa-7473-4617-a8f0-61324cc0e3b1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>[{'color': 'blue', 'height': 1, 'location': 1,...</td>\n",
       "      <td>ng훮 r훮kau</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7629eca4-df36-4921-973b-0ca7859c5018</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[{'color': 'blue', 'height': 1, 'location': 1,...</td>\n",
       "      <td>te r훮kau iti</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>89413927-94ca-4078-8198-85b957338400</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[{'color': 'white', 'height': 8, 'location': 1...</td>\n",
       "      <td>te r훮kau m훮</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>eb110390-7be8-4d7a-93e0-211c33c033f1</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[{'color': 'black', 'height': 10, 'location': ...</td>\n",
       "      <td>ng훮 r훮kau</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1012</th>\n",
       "      <td>3d543250-f7c8-47c4-9491-ab29d5c8c8fd</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[{'color': 'black', 'height': 9, 'location': 1...</td>\n",
       "      <td>te r훮kau kikorangi</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1013</th>\n",
       "      <td>b6fcfe8b-5604-47d5-8e1a-1a2830219683</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[{'color': 'white', 'height': 4, 'location': 1...</td>\n",
       "      <td>te r훮kau m훮</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1014</th>\n",
       "      <td>ecc53392-b801-4159-8fe3-fe9475e50672</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[{'color': 'red', 'height': 9, 'location': 1, ...</td>\n",
       "      <td>te r훮kau whero</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1015</th>\n",
       "      <td>bd1d8542-5e5f-4d03-9bf3-8b3d889fe737</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[{'color': 'red', 'height': 10, 'location': 1,...</td>\n",
       "      <td>ng훮 r훮kau</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1016</th>\n",
       "      <td>3c44cb2b-3651-4558-87f6-025d7c968f56</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[{'color': 'green', 'height': 2, 'location': 1...</td>\n",
       "      <td>ng훮 r훮kau</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1017 rows 횞 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        id  entropy  \\\n",
       "0     800d23b5-574c-46d3-94cf-1066082e9d7d      3.0   \n",
       "1     659289fa-7473-4617-a8f0-61324cc0e3b1      2.0   \n",
       "2     7629eca4-df36-4921-973b-0ca7859c5018      3.0   \n",
       "3     89413927-94ca-4078-8198-85b957338400      3.0   \n",
       "4     eb110390-7be8-4d7a-93e0-211c33c033f1      3.0   \n",
       "...                                    ...      ...   \n",
       "1012  3d543250-f7c8-47c4-9491-ab29d5c8c8fd      3.0   \n",
       "1013  b6fcfe8b-5604-47d5-8e1a-1a2830219683      3.0   \n",
       "1014  ecc53392-b801-4159-8fe3-fe9475e50672      3.0   \n",
       "1015  bd1d8542-5e5f-4d03-9bf3-8b3d889fe737      3.0   \n",
       "1016  3c44cb2b-3651-4558-87f6-025d7c968f56      3.0   \n",
       "\n",
       "                                                  r훮kau         description  \\\n",
       "0     [{'color': 'blue', 'height': 4, 'location': 1,...         te r훮kau m훮   \n",
       "1     [{'color': 'blue', 'height': 1, 'location': 1,...           ng훮 r훮kau   \n",
       "2     [{'color': 'blue', 'height': 1, 'location': 1,...        te r훮kau iti   \n",
       "3     [{'color': 'white', 'height': 8, 'location': 1...         te r훮kau m훮   \n",
       "4     [{'color': 'black', 'height': 10, 'location': ...           ng훮 r훮kau   \n",
       "...                                                 ...                 ...   \n",
       "1012  [{'color': 'black', 'height': 9, 'location': 1...  te r훮kau kikorangi   \n",
       "1013  [{'color': 'white', 'height': 4, 'location': 1...         te r훮kau m훮   \n",
       "1014  [{'color': 'red', 'height': 9, 'location': 1, ...      te r훮kau whero   \n",
       "1015  [{'color': 'red', 'height': 10, 'location': 1,...           ng훮 r훮kau   \n",
       "1016  [{'color': 'green', 'height': 2, 'location': 1...           ng훮 r훮kau   \n",
       "\n",
       "      num_r훮kau  \n",
       "0             2  \n",
       "1             2  \n",
       "2             2  \n",
       "3             2  \n",
       "4             2  \n",
       "...         ...  \n",
       "1012          2  \n",
       "1013          2  \n",
       "1014          2  \n",
       "1015          2  \n",
       "1016          2  \n",
       "\n",
       "[1017 rows x 5 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r훮kau_data = pd.DataFrame(\n",
    "    {\n",
    "        'id': [j['id'] for j in json_data],\n",
    "        'entropy': [j['entropy'] for j in json_data],\n",
    "        'r훮kau': [j['sticks']['ng훮_r훮kau'] for j in json_data],\n",
    "        'description': descriptions\n",
    "    }\n",
    ")\n",
    "r훮kau_data['num_r훮kau'] = r훮kau_data['r훮kau'].apply(len)\n",
    "\n",
    "r훮kau_data['description'] = r훮kau_data.description.str.replace(\"tawhiti rawa\", \"tawhiti_rawa\")\n",
    "r훮kau_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2cb8beae-a6df-4da3-8d8f-ef462d210a6c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "te r훮kau pango kei te taha mau카\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "id = 'c26646db-3e36-4e8d-8652-264ec4d917cb'\n",
    "print(r훮kau_data.loc[r훮kau_data.id == id, 'description'].values[0])\n",
    "WorldState.from_dict({'ng훮_r훮kau': r훮kau_data.loc[r훮kau_data.id == id, 'r훮kau'].values[0]}).draw()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d6bd1548-029d-4af5-bbc9-81f94b7e12a8",
   "metadata": {},
   "source": [
    "## Preparing a tokenizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "487cc57b-c9ff-442b-9447-d77fbb3833d0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "r훮kau           1481\n",
       "te              1031\n",
       "ng훮              510\n",
       "me               401\n",
       "m훮               137\n",
       "k훮k훮riki         134\n",
       "k흲whai           134\n",
       "kikorangi        133\n",
       "parauri          132\n",
       "pango            127\n",
       "whero            117\n",
       "m훮whero          116\n",
       "iti               89\n",
       "nui               83\n",
       "h훮unga            64\n",
       "katoa             62\n",
       "taha              37\n",
       "kei               37\n",
       "mau카              33\n",
       "matau             26\n",
       "ki                24\n",
       "tawhiti_rawa      22\n",
       "rawa              19\n",
       "e                 16\n",
       "rua               15\n",
       "waenganui          5\n",
       "i                  3\n",
       "toru               1\n",
       "tuarua             1\n",
       "mai                1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "token_counts = pd.Series(' '.join(r훮kau_data.description).split(' ')).value_counts()\n",
    "token_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ff4a7197-2abe-4380-a7a3-fed0f707e19e",
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('../data/tokens.txt', 'w') as f:\n",
    "    for token in list(token_counts.index):\n",
    "        f.write(f\"{token}\\n\")\n",
    "    f.write(\"[END]\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b2967f2f-d087-46bf-b6d8-e810a134201f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r훮kau\n",
      "te\n",
      "ng훮\n",
      "me\n",
      "m훮\n",
      "k훮k훮riki\n",
      "k흲whai\n",
      "kikorangi\n",
      "parauri\n",
      "pango\n",
      "whero\n",
      "m훮whero\n",
      "iti\n",
      "nui\n",
      "h훮unga\n",
      "katoa\n",
      "taha\n",
      "kei\n",
      "mau카\n",
      "matau\n",
      "ki\n",
      "tawhiti_rawa\n",
      "rawa\n",
      "e\n",
      "rua\n",
      "waenganui\n",
      "i\n",
      "toru\n",
      "tuarua\n",
      "mai\n",
      "[END]"
     ]
    }
   ],
   "source": [
    "! cat ../data/tokens.txt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cdbb5d9-de95-4f30-afa8-673b627c9c9a",
   "metadata": {},
   "source": [
    "## Saving r훮kau data to disk"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "aff3c7c4-d337-44a5-9ad2-eeb46cd80d82",
   "metadata": {},
   "outputs": [],
   "source": [
    "r훮kau_data['r훮kau'] = r훮kau_data.r훮kau.apply(json.dumps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "cb33e9fc-b4fc-47ea-8171-baf68a08c5e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train Set: 778\n",
      "                                     id  entropy  \\\n",
      "0  800d23b5-574c-46d3-94cf-1066082e9d7d      3.0   \n",
      "1  659289fa-7473-4617-a8f0-61324cc0e3b1      2.0   \n",
      "2  7629eca4-df36-4921-973b-0ca7859c5018      3.0   \n",
      "3  89413927-94ca-4078-8198-85b957338400      3.0   \n",
      "5  90be1900-85fb-43a9-a069-c52a09ff6625      3.0   \n",
      "\n",
      "                                               r훮kau   description  num_r훮kau  \n",
      "0  [{\"color\": \"blue\", \"height\": 4, \"location\": 1,...   te r훮kau m훮          2  \n",
      "1  [{\"color\": \"blue\", \"height\": 1, \"location\": 1,...     ng훮 r훮kau          2  \n",
      "2  [{\"color\": \"blue\", \"height\": 1, \"location\": 1,...  te r훮kau iti          2  \n",
      "3  [{\"color\": \"white\", \"height\": 8, \"location\": 1...   te r훮kau m훮          2  \n",
      "5  [{\"color\": \"pink\", \"height\": 6, \"location\": 1,...     ng훮 r훮kau          2  \n",
      "\n",
      "Dev Set: 132\n",
      "                                      id  entropy  \\\n",
      "12  76204705-84fe-4c6d-bd70-f101bbe1bb64      3.0   \n",
      "15  01345805-7fa5-4457-9a2e-a59529ce87fa      3.0   \n",
      "22  0ef57153-5247-47fa-bdbb-ce6c92562a28      3.0   \n",
      "39  4c5f71b6-ac9d-479d-a2a6-fd0a0f17367a      3.0   \n",
      "47  5c85445e-2f10-4e87-843e-1bc5c4b79c89      3.0   \n",
      "\n",
      "                                                r훮kau     description  \\\n",
      "12  [{\"color\": \"brown\", \"height\": 1, \"location\": 1...       ng훮 r훮kau   \n",
      "15  [{\"color\": \"yellow\", \"height\": 7, \"location\": ...       ng훮 r훮kau   \n",
      "22  [{\"color\": \"red\", \"height\": 2, \"location\": 1, ...       ng훮 r훮kau   \n",
      "39  [{\"color\": \"red\", \"height\": 6, \"location\": 1, ...  te r훮kau pango   \n",
      "47  [{\"color\": \"green\", \"height\": 3, \"location\": 1...       ng훮 r훮kau   \n",
      "\n",
      "    num_r훮kau  \n",
      "12          2  \n",
      "15          2  \n",
      "22          2  \n",
      "39          2  \n",
      "47          2  \n",
      "\n",
      "Test Set: 107\n",
      "                                      id  entropy  \\\n",
      "4   eb110390-7be8-4d7a-93e0-211c33c033f1      3.0   \n",
      "23  60750d65-2175-4f39-a223-11e36a0f0218      3.0   \n",
      "34  7233fd82-237f-4a13-8ef9-0ab050474c8d      3.0   \n",
      "43  f0f1aced-414f-46da-a931-54ff2c0b4324      3.0   \n",
      "52  0463f066-e8a3-492b-ac64-bc2c29e0bdea      3.0   \n",
      "\n",
      "                                                r훮kau       description  \\\n",
      "4   [{\"color\": \"black\", \"height\": 10, \"location\": ...         ng훮 r훮kau   \n",
      "23  [{\"color\": \"white\", \"height\": 7, \"location\": 1...       te r훮kau m훮   \n",
      "34  [{\"color\": \"yellow\", \"height\": 7, \"location\": ...         ng훮 r훮kau   \n",
      "43  [{\"color\": \"black\", \"height\": 10, \"location\": ...    te r훮kau pango   \n",
      "52  [{\"color\": \"blue\", \"height\": 7, \"location\": 1,...  te r훮kau m훮whero   \n",
      "\n",
      "    num_r훮kau  \n",
      "4           2  \n",
      "23          2  \n",
      "34          2  \n",
      "43          2  \n",
      "52          2  \n"
     ]
    }
   ],
   "source": [
    "def deterministic_split(data, train_ratio=0.7, dev_ratio=0.15, test_ratio=0.15, id_column='id'):\n",
    "    \"\"\"\n",
    "    Splits the data into train, development, and test sets based on hash values of an identifier column.\n",
    "    \n",
    "    Args:\n",
    "    - data (DataFrame): The pandas DataFrame to split.\n",
    "    - train_ratio (float): The proportion of the data to allocate to the training set.\n",
    "    - dev_ratio (float): The proportion of the data to allocate to the development set.\n",
    "    - test_ratio (float): The proportion of the data to allocate to the test set.\n",
    "    - id_column (str): The name of the column used as a unique identifier for hashing.\n",
    "    \n",
    "    Returns:\n",
    "    - train_set (DataFrame): The training set.\n",
    "    - dev_set (DataFrame): The development set.\n",
    "    - test_set (DataFrame): The test set.\n",
    "    \"\"\"\n",
    "    if not np.isclose(train_ratio + dev_ratio + test_ratio, 1.0):\n",
    "        raise ValueError(\"The sum of train, dev, and test ratios must be 1.\")\n",
    "\n",
    "    # Calculate thresholds based on ratios\n",
    "    threshold1 = train_ratio  # Adjust the scale according to the hash output size (32 hex digits)\n",
    "    threshold2 = (train_ratio + dev_ratio)\n",
    "\n",
    "    def assign_set(x):\n",
    "        # Hash the identifier\n",
    "        hash = hashlib.md5(str(x).encode()).hexdigest()\n",
    "        hash_val = int(hash, 16) / 16**32\n",
    "        \n",
    "        # Assign set based on hash value\n",
    "        if hash_val < threshold1:\n",
    "            return 'train'\n",
    "        elif hash_val < threshold2:\n",
    "            return 'dev'\n",
    "        else:\n",
    "            return 'test'\n",
    "\n",
    "    # Apply hashing and thresholds to assign sets\n",
    "    data['train_set'] = data[id_column].apply(assign_set)\n",
    "\n",
    "    # Split the data\n",
    "    train_set = data[data['train_set'] == 'train']\n",
    "    dev_set = data[data['train_set'] == 'dev']\n",
    "    test_set = data[data['train_set'] == 'test']\n",
    "\n",
    "    return train_set.drop(columns='train_set'), dev_set.drop(columns='train_set'), test_set.drop(columns='train_set')\n",
    "\n",
    "# Split the data deterministically\n",
    "train_set, dev_set, test_set = deterministic_split(r훮kau_data, train_ratio=0.8, dev_ratio=0.1, test_ratio=0.1, id_column='id')\n",
    "\n",
    "print(f\"Train Set: {len(train_set)}\")\n",
    "print(train_set.head())\n",
    "print(f\"\\nDev Set: {len(dev_set)}\")\n",
    "print(dev_set.head())\n",
    "print(f\"\\nTest Set: {len(test_set)}\")\n",
    "print(test_set.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7876a6e6-19f6-445c-a239-7f696bd4713f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>entropy</th>\n",
       "      <th>r훮kau</th>\n",
       "      <th>description</th>\n",
       "      <th>num_r훮kau</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>800d23b5-574c-46d3-94cf-1066082e9d7d</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[{\"color\": \"blue\", \"height\": 4, \"location\": 1,...</td>\n",
       "      <td>te r훮kau m훮</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>659289fa-7473-4617-a8f0-61324cc0e3b1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>[{\"color\": \"blue\", \"height\": 1, \"location\": 1,...</td>\n",
       "      <td>ng훮 r훮kau</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7629eca4-df36-4921-973b-0ca7859c5018</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[{\"color\": \"blue\", \"height\": 1, \"location\": 1,...</td>\n",
       "      <td>te r훮kau iti</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>89413927-94ca-4078-8198-85b957338400</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[{\"color\": \"white\", \"height\": 8, \"location\": 1...</td>\n",
       "      <td>te r훮kau m훮</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>90be1900-85fb-43a9-a069-c52a09ff6625</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[{\"color\": \"pink\", \"height\": 6, \"location\": 1,...</td>\n",
       "      <td>ng훮 r훮kau</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1012</th>\n",
       "      <td>3d543250-f7c8-47c4-9491-ab29d5c8c8fd</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[{\"color\": \"black\", \"height\": 9, \"location\": 1...</td>\n",
       "      <td>te r훮kau kikorangi</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1013</th>\n",
       "      <td>b6fcfe8b-5604-47d5-8e1a-1a2830219683</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[{\"color\": \"white\", \"height\": 4, \"location\": 1...</td>\n",
       "      <td>te r훮kau m훮</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1014</th>\n",
       "      <td>ecc53392-b801-4159-8fe3-fe9475e50672</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[{\"color\": \"red\", \"height\": 9, \"location\": 1, ...</td>\n",
       "      <td>te r훮kau whero</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1015</th>\n",
       "      <td>bd1d8542-5e5f-4d03-9bf3-8b3d889fe737</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[{\"color\": \"red\", \"height\": 10, \"location\": 1,...</td>\n",
       "      <td>ng훮 r훮kau</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1016</th>\n",
       "      <td>3c44cb2b-3651-4558-87f6-025d7c968f56</td>\n",
       "      <td>3.0</td>\n",
       "      <td>[{\"color\": \"green\", \"height\": 2, \"location\": 1...</td>\n",
       "      <td>ng훮 r훮kau</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>778 rows 횞 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                        id  entropy  \\\n",
       "0     800d23b5-574c-46d3-94cf-1066082e9d7d      3.0   \n",
       "1     659289fa-7473-4617-a8f0-61324cc0e3b1      2.0   \n",
       "2     7629eca4-df36-4921-973b-0ca7859c5018      3.0   \n",
       "3     89413927-94ca-4078-8198-85b957338400      3.0   \n",
       "5     90be1900-85fb-43a9-a069-c52a09ff6625      3.0   \n",
       "...                                    ...      ...   \n",
       "1012  3d543250-f7c8-47c4-9491-ab29d5c8c8fd      3.0   \n",
       "1013  b6fcfe8b-5604-47d5-8e1a-1a2830219683      3.0   \n",
       "1014  ecc53392-b801-4159-8fe3-fe9475e50672      3.0   \n",
       "1015  bd1d8542-5e5f-4d03-9bf3-8b3d889fe737      3.0   \n",
       "1016  3c44cb2b-3651-4558-87f6-025d7c968f56      3.0   \n",
       "\n",
       "                                                  r훮kau         description  \\\n",
       "0     [{\"color\": \"blue\", \"height\": 4, \"location\": 1,...         te r훮kau m훮   \n",
       "1     [{\"color\": \"blue\", \"height\": 1, \"location\": 1,...           ng훮 r훮kau   \n",
       "2     [{\"color\": \"blue\", \"height\": 1, \"location\": 1,...        te r훮kau iti   \n",
       "3     [{\"color\": \"white\", \"height\": 8, \"location\": 1...         te r훮kau m훮   \n",
       "5     [{\"color\": \"pink\", \"height\": 6, \"location\": 1,...           ng훮 r훮kau   \n",
       "...                                                 ...                 ...   \n",
       "1012  [{\"color\": \"black\", \"height\": 9, \"location\": 1...  te r훮kau kikorangi   \n",
       "1013  [{\"color\": \"white\", \"height\": 4, \"location\": 1...         te r훮kau m훮   \n",
       "1014  [{\"color\": \"red\", \"height\": 9, \"location\": 1, ...      te r훮kau whero   \n",
       "1015  [{\"color\": \"red\", \"height\": 10, \"location\": 1,...           ng훮 r훮kau   \n",
       "1016  [{\"color\": \"green\", \"height\": 2, \"location\": 1...           ng훮 r훮kau   \n",
       "\n",
       "      num_r훮kau  \n",
       "0             2  \n",
       "1             2  \n",
       "2             2  \n",
       "3             2  \n",
       "5             2  \n",
       "...         ...  \n",
       "1012          2  \n",
       "1013          2  \n",
       "1014          2  \n",
       "1015          2  \n",
       "1016          2  \n",
       "\n",
       "[778 rows x 5 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "b3813a80-9c5e-493f-b8f8-bfbc4ced5bb2",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_set.to_csv('../data/train_set.csv', index=False)\n",
    "test_set.to_csv('../data/test_set.csv', index=False)\n",
    "dev_set.to_csv('../data/dev_set.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "74b00ec9-527e-43db-a550-41dc978223ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "r훮kau_data = r훮kau_data[['id', 'entropy', 'num_r훮kau', 'r훮kau', 'description']]\n",
    "r훮kau_data.to_csv('../data/r훮kau_data.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
